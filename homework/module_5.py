'''"Многопроцессное программирование"
Если вы решали старую версию задачи, проверка будет производиться по ней.
Ссылка на старую версию тут.
Цель: понять разницу между линейным и многопроцессным подходом, выполнив операции обоими способами.

Задача "Многопроцессное считывание":
Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.
Подготовка:
Скачайте архив с файлами для считывания данных и распакуйте его в проект для дальнейшего использования.
Выполнение:
Создайте функцию read_info(name), где name - название файла. Функция должна:
Создавать локальный список all_data.
Открывать файл name для чтения.
Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
Во время считывания добавлять каждую строку в список all_data.
Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.
Создайте список названий файлов в соответствии с названиями файлов архива.
Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект Pool. Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов. Измерьте время выполнения и выведите его в консоль.
Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности, предварительно закомментировав другой.

Пример результата выполнения программы:
Выполняемый код:
def read_info(name):
...
]]

# Линейный вызов

# Многопроцессный

Вывод на консоль, 2 запуска (результаты могут отличаться):
0:00:03.046163 (линейный)
0:00:01.092300 (многопроцессный)

Примечания:
Используйте конструкцию if __name__ == '__main__' при многопроссном подходе.
Выводить или возвращать список all_data в функции не нужно. Можете сделать это, но кол-во информации в файлах достигает - 10^9 строк.
Дополнительно о классе Pool можете прочитать здесь.
Файл module_10_5.py загрузите на ваш GitHub репозиторий. В решении пришлите ссылку на него.
Успехов!'''
import time
import concurrent.futures
def read(name):
    all_data = []  
    with open(name, 'r', encoding='utf-8') as file:
            while True:
                line = file.readline()  
                if not line: 
                    break
                all_data.append(line)  
   

   
        
name=['.gitignore','01_volatility.py','02_volatility_with_threads.py','03_volatility_with_processes.py','__init__.py']
start=time.time()
print(read(name[0]))
print(read(name[1]))
print(read(name[2]))
print(read(name[3]))
end=time.time()
print(start-end)

if __name__=='__main__':
     with concurrent.futures.ThreadPoolExecutor(max_workers=3) as e:
          start=time.time()
          result= e.map(read,name)
          end=  time.time()   
          print(start-end)


          

