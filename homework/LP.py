'''### **1. Сравнение файлов**
Напиши программу, которая принимает на вход два текстовых файла и сравнивает их содержимое. Если файлы одинаковы, программа выводит **"Файлы одинаковы"**, если нет — выводит **"Файлы различаются"**.

---

### **2. Генерация случайных данных в файл**
Напиши программу, которая генерирует 1000 случайных целых чисел и записывает их в файл `random_numbers.txt`. Затем программа должна посчитать среднее значение чисел и вывести его в файл `statistics.txt`.

---

### **3. Чтение данных в таблице CSV**
Напиши программу, которая читает CSV-файл `employees.csv` (в нем хранятся данные о сотрудниках компании: имя, возраст, зарплата) и находит самого младшего сотрудника. Выведи его имя и возраст.

---

### **4. Генерация отчета по транзакциям**
Создай программу, которая анализирует данные из файла `transactions.csv` (колонки: дата, сумма, описание) и выводит отчет:
- Общее количество транзакций,
- Общая сумма по всем транзакциям,
- Сумма по положительным и отрицательным транзакциям,
- Дата самой крупной транзакции.

---

### **5. Построение индексного файла**
Напиши программу, которая создает индексный файл `index.txt` для файла с большим количеством строк `data.txt`. В индексном файле нужно записывать информацию о номере строки и начале каждого слова в этой строке.  
Например, если в строке содержатся слова, индексация будет выглядеть так:  
`1: слово1 (позиция 0), слово2 (позиция 6)`

---

### **6. Объединение данных из нескольких файлов в формате JSON**
У тебя есть несколько файлов `data1.json`, `data2.json`, ..., `dataN.json`. Каждый из этих файлов содержит JSON-объект с данными о разных людях (имя, возраст). Напиши программу, которая объединит все эти данные в один файл `merged.json`.

---

### **7. Создание зеркала файла**
Напиши программу, которая создает зеркальное отображение содержимого файла. Например, если в исходном файле `input.txt` содержится строка "Hello", в новом файле `output.txt` должна быть строка "olleH". Повторяй этот процесс для каждой строки.

---

### **8. Дедупликация строк в файле**
Напиши программу, которая считывает строки из файла `input.txt`, удаляет все дублирующиеся строки, оставляя только уникальные, и записывает результат в новый файл `unique_lines.txt`. Порядок строк должен быть сохранен.

---

### **9. Анализ текстовых файлов с подсчетом частоты слов**
Напиши программу, которая читает текстовый файл `article.txt`, подсчитывает, сколько раз каждое слово встречается в тексте, и сохраняет результаты в новый файл `word_count.txt` в формате:
слово1: количество
слово2: количество
...
---

### **10. Создание сложной структуры данных и запись в файл**
Напиши программу, которая создает структуру данных (например, словарь), содержащую информацию о нескольких книгах (название, автор, год издания). Сохрани эту структуру в файл `books.json` в формате JSON. После этого программа должна прочитать файл и вывести данные на экран.'''
''' Сравнение файлов**
Напиши программу, которая принимает на вход два текстовых файла и сравнивает их содержимое. 
Если файлы одинаковы, программа выводит **"Файлы одинаковы"**, если нет — выводит **"Файлы различаются"**.'''

def func(x,y):
    with open(x,'r',encoding='utf-8') as file:
        with open(y,'r',encoding='utf-8') as file1:
            x1=file.read().split('\n')
            x2=file1.read().split('\n')
            print(x1,x2)
            if x1==x2:
                print('Файлы одинаковы')
            else: print("Файлы различаются")


func('homework/file1.txt','homework/file2.txt')

'''Напиши программу, которая генерирует 1000 случайных целых чисел и записывает их в файл `random_numbers.txt`. 
Затем программа должна посчитать среднее значение чисел и вывести его в файл `statistics.txt`.'''

import random
x = random.randint(1,1000)
y=[]
for x in range(1,1001):
    x = random.randint(1,1000)
    y.append(x)

with open('random_numbers.txt','w',encoding='utf-8') as file:
    with open('statistics.txt','w',encoding='utf-8') as file1:
        y1=list(map(str,y))
        y1=','.join(y1)
        file.write(y1)
        y2=sum(y)/len(y)
        y2=str(y2)
        file1.write(y2)

'''Объединение текстовых файлов**
У тебя есть несколько текстовых файлов (`file1.txt`, `file2.txt`, ...). Напиши программу, которая объединяет их содержимое в один файл, 
но с добавлением номера файла в начале каждой строки.
'''
'''def x(*name):
    with open('homework/file1.txt','r',encoding='utf-8') as file:
    with open('homework/file2.txt','r',encoding='utf-8') as file1:
        x=[]
        x1=file.read().split('\n')
        x2=file1.read().split('\n')
        x.append(x1)
        x.append(x2)
        print(x)
        for x1 in x:
            for x2,x1 in enumerate(x1):
                
                x3=f'{x2}:{x1}'
                print(x3,type(x3))'''

''' Чтение данных в таблице CSV**
Напиши программу, которая читает CSV-файл `employees.csv` (в нем хранятся данные о сотрудниках компании: имя, возраст, зарплата) 
и находит самого младшего сотрудника. Выведи его имя и возраст.
'''       
import csv    
with open('homework/employees.csv','r',encoding='utf-8') as file:
    reader = csv.DictReader(file)
    youngest_employee = None
    for row in reader:
                print(int(row['Возраст']))
                if youngest_employee is None or row['Возраст'] < youngest_employee['Возраст']:
                    youngest_employee = row
    print(youngest_employee)                

'''4. Генерация отчета по транзакциям**
Создай программу, которая анализирует данные из файла `transactions.csv` (колонки: дата, сумма, описание) и выводит отчет:
- Общее количество транзакций,
- Общая сумма по всем транзакциям,
- Сумма по положительным и отрицательным транзакциям,
- Дата самой крупной транзакции.'''   

import csv
with open('homework/transactions.csv','r',encoding='utf-8') as file:
    x=csv.DictReader(file)
    x1=[]
    x2=[]
    x3=[]
    x4=[]
    for xx in x:
        date = xx['дата']
        x1.append(xx['дата'])
        x2.append(int(xx['сумма']))
        print(xx)
        if int(xx['сумма'])>=0:
             x3.append(int(xx['сумма']))   
        else:
             x4.append(int(xx['сумма'])) 
      
print(len(x1))
print(sum(x2))
'''Построение индексного файла**
Напиши программу, которая создает индексный файл `index.txt` для файла с большим количеством строк `data.txt`. В индексном файле нужно записывать информацию о номере строки и начале каждого слова в этой строке.  
Например, если в строке содержатся слова, индексация будет выглядеть так:  
`1: слово1 (позиция 0), слово2 (позиция 6)`'''
with open('homework/data.txt','r',encoding='utf-8') as file:
     xxx=file.read().split('\n')
     print(xxx)
     x={}
     for y,xx in enumerate(xxx,start=1):
          for y1 in xx.split():
               x10=f'позиция:{xx.split().index(y1)}'
               print(x10)
               x[y]=xx
               print(x)
               
'''Напиши программу, которая создает зеркальное отображение содержимого файла. Например, если в исходном файле `input.txt` содержится строка "Hello", 
в новом файле `output.txt` должна быть строка "olleH". Повторяй этот процесс для каждой строки.'''

with open('homework/input.txt','r',encoding='utf-8') as file:
     y=file.read().split()
     x=[]
     for xx in y:
        x.append(xx[::-1])
     print(x)
     x='\n'.join(x)

''''''           
                     
x=['1','2','3','3']
x=len(x)
print(x)
               
'''### Легкие задания (5 шт.)
1. Обработка деления на ноль.  
   Напишите функцию, которая принимает два числа и делит первое на второе. Добавьте обработку исключения ZeroDivisionError с выводом сообщения: "Деление на ноль запрещено."'''

def func1(x,y):
     try:
        return x/y
     except ZeroDivisionError:
          print('Ошибка. На ноль делать нельзя')
          
func1(1,0)   

'''2. Чтение из файла.  
   Напишите программу, которая пытается прочитать содержимое файла. Если файла нет, обработайте исключение FileNotFoundError и выведите: "Файл не найден."'''

def func2(x):
    try:
        with open(x,'r',encoding='utf-8') as file:
         print(file.read())
    except FileNotFoundError:
        print("Файл не найден.")   
func2('ddjdj.txt')

'''3. Приведение типов.  
   Напишите функцию, которая принимает строку и преобразует ее в число. Если строку невозможно преобразовать, обработайте исключение ValueError и выведите сообщение: "Ошибка: некорректное значение."'''

def func3(x):
    try:
        print(str(x))
    except ValueError:
        print('"Ошибка: некорректное значение."')
func3(10)


'''4. Обращение к несуществующему индексу.  
   Напишите программу, которая пытается получить элемент списка по индексу, указанному пользователем. Если индекс выходит за границы, обработайте исключение IndexError.'''
def func4(x):
    try:
        y=[1,2,3,4,5]
        print(y[x])
    except IndexError:
        print('Ошибка') 
func4(6)       


'''5. Работа с ключами словаря.  
   Напишите программу, которая пытается получить значение из словаря по ключу, указанному пользователем. Если ключа нет, обработайте исключение KeyError.'''

def func5(x):
    try:
        y={'1':1,'2':2}
        print(y[x])
    except KeyError:
        print('Ошибка') 
func5('4')        


### Средние задания (10 шт.)
'''1. Множественная обработка исключений.  
   Напишите функцию, которая принимает два числа, делит первое на второе и преобразует результат в целое число. Обработайте исключения ZeroDivisionError и ValueError.'''
def func6(x,y):
    try:
        print(x/y)
    except ZeroDivisionError:
        print('На ноль делить нельзя')
    except ValueError:
        print('Неверный формат')
func6(1,8)

'''2. Вложенные исключения.  
   Напишите программу, которая считывает строку из файла, преобразует ее в число и делит это число на 2. Обработайте все возможные исключения.'''

def func7(x):
    try:
        with open(x,'r',encoding='utf-8') as file:
            x=(int(file.read()))/2
            print(x)
    except FileNotFoundError:
        print('no')  
    except ZeroDivisionError:
        print('На ноль делать нельзя')
func7('lessons/module_7/text3.txt')              



'''3. Повтор ввода.  
   Напишите программу, которая запрашивает у пользователя число и повторяет ввод, если была ошибка преобразования строки в число.'''
def func8():
    try:
        x=int(input(''))
        print(x)
    except ValueError:
        print('no')  
func8()          
    
'''4. Генератор исключений.  
   Напишите функцию, которая выбрасывает исключение RuntimeError, если переданное число меньше 10. Обработайте это исключение в вызывающем коде.'''

def chek(x):
    if x<10:
        raise RuntimeError
    print(x)

def func9(x):
    try:
        chek(x)
    except RuntimeError:
        print('no')
func9(9)        





'''5. Обработка пользовательского ввода.  
   Напишите программу, которая принимает от пользователя строку, затем пытается преобразовать ее в число и выполнить с ним математическую операцию. Обработайте все возможные ошибки.'''

def func10():
    try:
        x=int(input(''))
        print(10/x)
    except ValueError:
        print('no')   
    except ZeroDivisionError:
        print(0)   
func10()        
'''6. Функция с вложенным вызовом.  
   Создайте три функции, вызывающих друг друга. В самой внутренней выбросьте исключение, обработайте его во внешней функции и выведите стек вызовов.'''
def funcc():
    try:
        funccc()
    except ZeroDivisionError:
        print('+')    

def funccc():
    funcccc()

def funcccc():   
    raise ZeroDivisionError

funcc()

'''7. Словарь с неизвестной структурой.  
   Напишите функцию, которая проверяет наличие ключа "data" в словаре и преобразует его значение в число. Если словарь не имеет ключа "data" или значение нельзя преобразовать, выбросьте соответствующие исключения.'''
def  func11(x):
    try:
        x1=x['data']
        x1=int(x1)
        print(x1)
    except KeyError:
        print('Такого ключа нет')   
    except TypeError:
        print('Нельзя преобразовать') 
func11({"data1":2})            
    
'''8. Повторный запуск функции.  
   Напишите функцию, которая вызывает другую функцию с обработкой исключений. Если произошла ошибка, выполните повторный запуск до трех раз.'''



'''9. Проверка типов данных.  
   Напишите программу, которая принимает два значения, проверяет их тип (число или строка) и выполняет операции в зависимости от типов. Если переданы неправильные типы, выбрасывайте исключения.

10. Работа с JSON.  
    Напишите программу, которая загружает данные из JSON-файла и выводит определенное поле. Обработайте исключения FileNotFoundError, JSONDecodeError и KeyError.

---

### Сложные задания (5 шт.)
1. Создание собственного исключения.  
   Напишите класс исключения InvalidAgeError, который выбрасывается, если возраст пользователя меньше 18. Создайте программу, которая запрашивает возраст и выбрасывает это исключение при необходимости.

2. Взаимодействие с API.  
   Напишите программу, которая обращается к несуществующему URL (например, через requests) и обрабатывает ошибки подключения (ConnectionError), таймаута (Timeout) и ответа (HTTPError).

3. Логирование ошибок.  
   Напишите программу, которая вызывает несколько функций, где каждая выбрасывает свое исключение. Обработайте все исключения и добавьте логирование ошибок с использованием модуля logging.

4. Контекстный менеджер с исключениями.  
   Создайте собственный контекстный менеджер, который при выполнении блока кода внутри него выбрасывает исключение CustomError. Обработайте исключение за пределами контекстного менеджера.


5. Взаимодействие нескольких исключений.  
   Напишите программу, которая выполняет сложную операцию (например, чтение файла, преобразование данных, расчет формулы). В каждой стадии может возникнуть свое исключение. Реализуйте цепочку обработки исключений и логируйте каждый шаг выполнения.'''         
     

     
          
     
     




         




        
        
        