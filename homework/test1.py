'''Задачи к сегодняшнему зачёту:

1. Создание класса  
   Создай класс Person с атрибутом name. Создай объект этого класса и выведи значение атрибута name.

2. Атрибуты объекта  
   В классе Person добавь атрибуты age и city. Создай объект с заполненными атрибутами и выведи их значения.

3. Методы объекта  
   Добавь метод greet() в класс Person, чтобы он выводил приветствие с именем человека. Создай объект и вызови этот метод.

4. Инициализатор `__init__`  
   Добавь метод __init__ в Person, чтобы автоматически задавать значения name, age и city при создании объекта. Создай объект с этими параметрами.

5. Указатель на объект (`self`)  
   Добавь метод birthday() в класс Person, который увеличивает значение age на 1 с использованием self. Проверь изменение возраста.

6. Специальный метод `__str__`  
   Добавь метод __str__ в Person, чтобы при вызове print(person) выводились name, age и city. Создай объект и проверь вывод.

7. Перегрузка оператора сложения (`__add__`)  
   Напиши класс Wallet с атрибутом balance. Переопредели метод __add__ для сложения балансов двух объектов Wallet. Создай два объекта и сложи их.

8. Классовый атрибут  
   В классе Dog создай атрибут класса species, общий для всех объектов, и добавь атрибуты экземпляра name и age. Создай объекты и проверь значение species.

9. Метод класса и метод экземпляра  
   Реализуй метод класса library_info() и метод экземпляра book_count() в классе Library. Первый метод должен возвращать общее количество книг, а второй — число книг в конкретной библиотеке.

10. Перегрузка метода `__len__`  
    Создай класс Playlist, который принимает список песен и реализует метод __len__, чтобы возвращать количество песен.

11. Метод `__new__` для управления созданием объектов  
    Напиши класс Singleton, использующий __new__, чтобы создавать только один экземпляр этого класса. Проверь поведение при создании нескольких объектов.

12. Работа с атрибутами класса и экземпляра  
    Создай класс Counter, добавь атрибут класса count для подсчета созданных объектов. Создай несколько объектов и проверь значение count.

13. Регистрация и проверка уникальности  
    Создай класс RegistrationSystem с методом для добавления новых пользователей и проверки уникальности их логинов. Храни пользователей в классовом атрибуте.

14. Приватные и защищенные атрибуты  
    В классе BankAccount создай защищенный атрибут _balance и приватный атрибут __pin. Реализуй методы для изменения этих атрибутов с проверкой.

15. Декораторы методов класса  
    Добавь в RegistrationSystem декоратор @classmethod для метода, возвращающего общее число зарегистрированных пользователей.

16. Перегрузка оператора сравнения (`__eq__`)  
    Напиши класс Product с атрибутами name и price. Переопредели метод __eq__, чтобы сравнение двух продуктов происходило по имени и цене.

17. Контроль доступа к атрибутам  
    Создай класс ProtectedData с атрибутом data и методами для получения и изменения значения с проверкой. Попробуй напрямую изменить data.

18. Счетчик вызовов метода  
    Создай класс MethodCounter с методом track(), который подсчитывает, сколько раз он был вызван для конкретного объекта.

19. Управление доступом к атрибуту  
    Напиши класс Temperature, с приватным атрибутом _celsius, и добавь методы get_celsius() и set_celsius(). При установке значения проверь, что температура не выходит за заданные пределы.

20. Система покупки товаров  
    Создай класс ShoppingCart, где можно добавлять и удалять товары с указанием их цены и количества. Реализуй метод для подсчета общей стоимости корзины.

21. Кэширование результатов метода  
    Создай класс FibonacciCalculator с методом calculate(n), который вычисляет n-е число Фибоначчи. Добавь кэширование, чтобы повторные вызовы с теми же значениями n возвращали закэшированный результат, а не вычисляли его заново.


22. Лог действий пользователя  
    Создай класс UserActivityLogger для логирования действий пользователя. Каждый объект имеет уникальный идентификатор пользователя и метод log_action(action), который записывает действие в атрибут activity_log (список строк). Реализуй метод get_last_n_actions(n), который возвращает последние n действий пользователя. 

23. Подсчёт и управление экземплярами с удалением  
    Напиши класс Task, который увеличивает атрибут класса active_tasks при создании экземпляра и уменьшает его при удалении объекта. Реализуй метод __del__, чтобы корректно отслеживать удаление объектов. Также добавь метод get_active_tasks() для получения текущего количества активных задач.

24. Менеджер задач с приоритетом  
    Создай класс TaskManager, который управляет списком задач с приоритетами. Задачи должны храниться в виде словаря, где ключ — приоритет, а значение — список задач с этим приоритетом. Реализуй методы для добавления и удаления задач, а также метод get_next_task(), который возвращает задачу с наивысшим приоритетом и удаляет её из очереди.

25. Управление доступом к атрибутам через декораторы  
    Напиши класс TemperatureControl с приватным атрибутом _temperature и декоратором для метода temperature, который проверяет, что значение температуры устанавливается только в пределах допустимого диапазона (например, от -50 до 150 градусов). Реализуй также метод display_temperature() для вывода текущего значения в градусах Цельсия и Фаренгейта.'''

'''
1. Создание класса  
   Создай класс Person с атрибутом name. Создай объект этого класса и выведи значение атрибута name.'''

class Person:
    def __init__(self,name):
        self.name = name 

i = Person('Ksenia')
print(i.name)

'''2. Атрибуты объекта  
   В классе Person добавь атрибуты age и city. Создай объект с заполненными атрибутами и выведи их значения.
'''
class Person:
    def __init__(self,name,age,city):
        self.name = name 
        self.age = age
        self.city = city

i = Person('Ksenia',27,"EKB")
print(i.name)
print(i.age)
print(i.city)

'''3. Методы объекта  
   Добавь метод greet() в класс Person, чтобы он выводил приветствие с именем человека. Создай объект и вызови этот метод.
'''
class Person:
    def __init__(self,name,age,city):
        self.name = name 
        self.age = age
        self.city = city

    def greet(self):
        print(f"Hi,{self.name}")

i = Person('Ksenia',27,"EKB")
i.greet()

'''Инициализатор `__init__`  
   Добавь метод __init__ в Person, чтобы автоматически задавать значения name, age и city при создании объекта. Создай объект с этими параметрами.
'''
class Person:
    def __init__(self,name,age,city):
        self.name = name 
        self.age = age
        self.city = city

    def greet(self):
        print(f"Hi,{self.name}")

'''Указатель на объект (`self`)  
   Добавь метод birthday() в класс Person, который увеличивает значение age на 1 с использованием self. Проверь изменение возраста.'''     

class Person:
    def __init__(self,name,age,city):
        self.name = name 
        self.age = age
        self.city = city

    def greet(self):
        print(f"Hi,{self.name}")

    def birthday(self):
        print(self.age +1)  

i = Person('Ksenia',27,"EKB")
i.birthday()

'''Специальный метод `__str__`  
   Добавь метод __str__ в Person, чтобы при вызове print(person) выводились name, age и city. Создай объект и проверь вывод.'''

class Person:
    def __init__(self,name,age,city):
        self.name = name 
        self.age = age
        self.city = city

    def greet(self):
        print(f"Hi,{self.name}")

    def birthday(self):
        print(self.age +1)  

    def __str__(self):
        print(f'Hi,{self.name}, yoy age - {self.age}, you from - {self.city}')    

i = Person('Ksenia',27,"EKB")
i.__str__()

'''Перегрузка оператора сложения (`__add__`)  
   Напиши класс Wallet с атрибутом balance. Переопредели метод __add__ для сложения балансов двух объектов Wallet. Создай два объекта и сложи их.'''

class Wallet:
    def __init__(self,balance):
        self.balance = balance

    def __add__(self,other:'Wallet'):
        if isinstance(other,Wallet):
            print( self.balance + other.balance)

x1 = Wallet(10)
s2 = Wallet(33)

x3 = x1+s2

'''Классовый атрибут  
   В классе Dog создай атрибут класса species, общий для всех объектов, и добавь атрибуты экземпляра name и age. Создай объекты и проверь значение species.
'''

class Dog:
    

        




    
